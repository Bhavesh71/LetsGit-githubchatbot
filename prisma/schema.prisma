// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL") // IN .ENV
  extensions = [vector]
}

model User {
  id        String   @id @default(cuid()) // PK CUCID Automatically generates a unique string ID like ckv8k3pzz000001l5e7sm0k2q 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageUrl  String? // All have a ? â†’ meaning they are optional (can be null)
  firstName String?
  lastName  String?

  emailAddress String @unique

  credits Int @default(150) // 150 FILES CAN BE UPLOADED FROM GITHUB BY DEFAULT

  userToProjects UserToProject[]

  qusetionsAsked Question[] // One user can ask many questions

  stripeTransactions StripeTransaction[]
  Meeting            Meeting[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  githubUrl String

  deletedAt DateTime?

  userToProjects       UserToProject[]
  commits              Commit[] // One project can have many commits
  sourceCodeEmbeddings SourceCodeEmbedding[]

  savedQuestions Question[] // One project can have many saved questions

  Meeting Meeting[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // ensure unique user-project pairs
}

model SourceCodeEmbedding {
  id String @id @default(cuid())

  summaryEmbedding Unsupported("vector(768)")? // 768 dimensions because particular embedding model geminiAI provides
  sourceCode       String
  fileName         String
  summary          String

  projectId String
  project   Project @relation(fields: [projectId], references: [id]) // all fields belong to one project
}

model StripeTransaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  credits Int
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String
  answer   String

  fileReferences Json?

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Commit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime

  // ai summary
  summary String
}

model Meeting {
  id   String @id @default(cuid())
  name String
  url  String

  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  status MeetingStatus @default(PROCESSING)

  issues Issue[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  meetingEmbeddings MeetingEmbedding[]
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}

model Issue {
  id       String  @id @default(cuid())
  start    String
  end      String
  gist     String?
  headline String?
  summary  String?

  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MeetingEmbedding {
  id        String                      @id @default(cuid())
  embedding Unsupported("vector(768)")?
  content   String?
  meetingId String
  meeting   Meeting                     @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}
