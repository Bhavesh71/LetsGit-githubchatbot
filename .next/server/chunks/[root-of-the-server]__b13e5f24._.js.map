{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n\n\n/*\n\n@t3-oss/env-nextjs: A wrapper utility from the T3 stack that helps validate environment variables in both server and client contexts.\n\nzod: A schema validation library used here to define what each environment variable should look like.\n\n*/"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,+KAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B,IAGA;;;;;;AAMA","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/app/api/webhook/stripe/route.ts"],"sourcesContent":["    // CORRESPONDS TO /api/webhook/stripe\r\n\r\n    import { db } from \"@/server/db\";\r\n    import { NextRequest, NextResponse } from \"next/server\";\r\n    import Stripe from 'stripe'\r\n\r\n    const stripe = new Stripe(process.env.STRIPE_WEBHOOK_KEY!, {\r\n        apiVersion: '2024-10-28'\r\n    })\r\n\r\n    export async function POST(request: Request) {\r\n\r\n        const body = await request.text()\r\n        const signature = request.headers.get('stripe-signature') as string\r\n\r\n        let event: Stripe.Event\r\n\r\n        try{\r\n            event = stripe.webhooks.constructEvent(body, signature, process.env.STRIPE_WEBHOOK_KEY! )\r\n        }catch (error) {\r\n            return NextResponse.json({error: 'Invalid Signature'}, {status: 400})\r\n        }\r\n        const session = event.data.object as Stripe.Checkout.Session\r\n\r\n        console.log(event.type)\r\n\r\n        if(event.type === 'checkout.session.completed') {\r\n            const credits = Number(session.metadata?.['credits'])\r\n            const userId = session.client_reference_id\r\n            if(!userId || !credits) {\r\n                return NextResponse.json({ error: 'Missing userId or credits' }, { status: 400 })\r\n            }\r\n\r\n            await db.stripeTransaction.create({ data: { userId, credits } })\r\n\r\n            await db.user.update({\r\n                where: { id: userId }, data: {\r\n                    credits: {\r\n                        increment: credits\r\n                    }\r\n                }\r\n            })\r\n            return NextResponse.json({ message: 'Credits added successfully' }, { status: 200 })\r\n        }\r\n\r\n        return NextResponse.json({message: \"Hello world\"})\r\n    }"],"names":[],"mappings":"AAAI,qCAAqC;;;;AAErC;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,wJAAA,CAAA,UAAM,CAAC,QAAQ,GAAG,CAAC,kBAAkB,EAAG;IACvD,YAAY;AAChB;AAEO,eAAe,KAAK,OAAgB;IAEvC,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEtC,IAAI;IAEJ,IAAG;QACC,QAAQ,OAAO,QAAQ,CAAC,cAAc,CAAC,MAAM,WAAW,QAAQ,GAAG,CAAC,kBAAkB;IAC1F,EAAC,OAAO,OAAO;QACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAO;QAAmB,GAAG;YAAC,QAAQ;QAAG;IACvE;IACA,MAAM,UAAU,MAAM,IAAI,CAAC,MAAM;IAEjC,QAAQ,GAAG,CAAC,MAAM,IAAI;IAEtB,IAAG,MAAM,IAAI,KAAK,8BAA8B;QAC5C,MAAM,UAAU,OAAO,QAAQ,QAAQ,EAAE,CAAC,UAAU;QACpD,MAAM,SAAS,QAAQ,mBAAmB;QAC1C,IAAG,CAAC,UAAU,CAAC,SAAS;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,MAAM,qHAAA,CAAA,KAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAAE,MAAM;gBAAE;gBAAQ;YAAQ;QAAE;QAE9D,MAAM,qHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACjB,OAAO;gBAAE,IAAI;YAAO;YAAG,MAAM;gBACzB,SAAS;oBACL,WAAW;gBACf;YACJ;QACJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA6B,GAAG;YAAE,QAAQ;QAAI;IACtF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAC,SAAS;IAAa;AACpD","debugId":null}}]
}