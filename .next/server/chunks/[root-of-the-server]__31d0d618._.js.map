{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n\n\n/*\n\n@t3-oss/env-nextjs: A wrapper utility from the T3 stack that helps validate environment variables in both server and client contexts.\n\nzod: A schema validation library used here to define what each environment variable should look like.\n\n*/"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,+KAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B,IAGA;;;;;;AAMA","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { initTRPC } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\nimport {TRPCError} from \"@trpc/server\";\n\nimport { db } from \"@/server/db\";\nimport { auth } from \"@clerk/nextjs/server\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst isAuthenticated = t.middleware(async ({ next, ctx }) => {\n  const user = await auth()\n\n\n  if (!user) {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'You must be logged in to access this resource'\n    })\n  }\n\n  // If user exists, continue and pass user to context\n  return next({\n    ctx: {\n      ...ctx,\n      user,\n    }\n  });\n}); // MIDDLEWARE FUNCTIONS WHICH TELLS TRPC ROUTER WHETHER THE USER IS AUTHENTICATED OR NOT \n\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\nexport const protectedProcedure = t.procedure.use(isAuthenticated);"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AACA;AACA;AACA;AAEA;AACA;;;;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,IAAA,qHAAA,CAAA,KAAE;QACF,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,mKAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,4IAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,gJAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,kBAAkB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE;IACvD,MAAM,OAAO,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;IAGtB,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,kKAAA,CAAA,YAAS,CAAC;YAClB,MAAM;YACN,SAAS;QACX;IACF;IAEA,oDAAoD;IACpD,OAAO,KAAK;QACV,KAAK;YACH,GAAG,GAAG;YACN;QACF;IACF;AACF,IAAI,yFAAyF;AAE7F,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AACxC,MAAM,qBAAqB,EAAE,SAAS,CAAC,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"@/server/api/trpc\";\n\nexport const postRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1) }))\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.post.create({\n        data: {\n          name: input.name,\n        },\n      });\n    }),\n\n  getLatest: publicProcedure.query(async ({ ctx }) => {\n    const post = await ctx.db.post.findFirst({\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    return post ?? null;\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,MAAM,aAAa,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,OAAO,8HAAA,CAAA,kBAAe,CACnB,KAAK,CAAC,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,+KAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAEF,QAAQ,8HAAA,CAAA,kBAAe,CACpB,KAAK,CAAC,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAG,IACzC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,MAAM;gBACJ,MAAM,MAAM,IAAI;YAClB;QACF;IACF;IAEF,WAAW,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC7C,MAAM,OAAO,MAAM,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,SAAS;gBAAE,WAAW;YAAO;QAC/B;QAEA,OAAO,QAAQ;IACjB;AACF","debugId":null}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/lib/gemini.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\r\nimport { Document } from '@langchain/core/documents';\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!)\r\nconst model = genAI.getGenerativeModel({\r\n    model: 'gemini-1.5-flash',\r\n})\r\n\r\n\r\nexport const aiSummariseCommit = async (diff: string) => {\r\n    const response = await model.generateContent([\r\n        `You are an expert programmer, and you are trying to summarize a git diff.\r\nReminders about the git diff format:\r\nFor every file, there are a few metadata lines, like (for example):\r\n\\`\\`\\` \r\ndiff --git a/lib/index.js b/lib/index.js\r\nindex aadf691..bfef603 100644\r\n--- a/lib/index.js\r\n+++ b/lib/index.js\r\n\\`\\`\\`\r\nThis means that \\`lib/index.js\\` was modified in this commit. Note that this is only an example.\r\nThen there is a specifier of the lines that were modified.\r\nA line starting with \\`+\\` means it was added.\r\nA line that starting with \\`-\\` means that line was deleted.\r\nA line that starts with neither \\`+\\` nor \\`-\\` is code given for context and better understanding.\r\nIt is not part of the diff.\r\n[...]\r\nEXAMPLE SUMMARY COMMENTS:\r\n\\`\\`\\`\r\n* Raised the amount of returned recordings from \\`10\\` to \\`100\\` [packages/server/recordings_api.ts], [packages/server/constants.ts]\r\n* Fixed a typo in the github action name [.github/workflows/gpt-commit-summarizer.yml]\r\n* Moved the \\`octokit\\` initialization to a separate file [src/octokit.ts], [src/index.ts]\r\n* Added an OpenAI API for completions [packages/utils/apis/openai.ts]\r\n* Lowered numeric tolerance for test files\r\n\\`\\`\\`\r\nMost commits will have less comments than this examples list.\r\nThe last comment does not include the file names,\r\nbecause there were more than two relevant files in the hypothetical commit.\r\nDo not include parts of the example in your summary.\r\nIt is given only as an example of appropriate comments.`,\r\n        `Please summarise the following diff file: \\n\\n${diff}`,\r\n    ]);\r\n    return response.response.text();\r\n}\r\n\r\n// console.log(await aiSummariseCommit(`\r\n//     diff --git a/prisma/schema.prisma b/prisma/schema.prisma\r\n// index 5f4b263..c13c41b 100644\r\n// --- a/prisma/schema.prisma\r\n// +++ b/prisma/schema.prisma\r\n// @@ -13,8 +13,8 @@ datasource db {\r\n//  model User {\r\n//     id           String @id @default(cuid())\r\n//     emailAddress String @unique\r\n// -   firstName   String\r\n// -   lastName    String\r\n// +   firstName   String?\r\n// +   lastName    String?\r\n//     imageUrl    String?\r\n\r\n//     stripeSubscriptionId String?    @unique\r\n    \r\n//     `))\r\n\r\n\r\n\r\nexport async function summariseCode(doc: Document) {\r\n    console.log(\"getting summary for\", doc.metadata.source);\r\n    try{\r\n        const code = doc.pageContent.slice(0, 10000); // Limit to 10k characters\r\n        const response = await model.generateContent([\r\n            `You are an intelligent senior software engineer who specialises in onboarding junior software engineers onto projects`,\r\n            `You are onboarding a junior software engineer and explaining to them the purpose of the ${doc.metadata.source} file\r\nHere is the code:\r\n---\r\n${code}\r\n---\r\n            Give a summary no more than 100 words of the code above`,\r\n        ]);\r\n\r\n        return response.response.text()\r\n\r\n    } catch (error) {\r\n        return ''\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport async function generateEmbedding(summary: string) {\r\n    const model = genAI.getGenerativeModel({\r\n        model: \"text-embedding-004\"\r\n    })\r\n    const result = await model.embedContent(summary)\r\n    const embedding = result.embedding\r\n    return embedding.values\r\n}\r\n// console.log(await generateEmbeddings(\"hello world\"))\r\n\r\n    /*\r\n\r\n    ❓What is diff?\r\n    diff refers to a Git diff, i.e., the output of the command:\r\n\r\n    bash\r\n    Copy code\r\n    git diff <commit_hash>^ <commit_hash>\r\n    This shows the changes made in a specific commit, including:\r\n\r\n    which lines were added, removed, or unchanged in each file,\r\n\r\n    metadata (file paths, index hashes, etc.).\r\n\r\n    Here's a small example:\r\n\r\n    diff\r\n    Copy code\r\n    diff --git a/example.js b/example.js\r\n    index e69de29..4b825dc 100644\r\n    --- a/example.js\r\n    +++ b/example.js\r\n    @@ -0,0 +1,2 @@\r\n    +console.log(\"Hello world\");\r\n    +console.log(\"This is a new file\");\r\n\r\n    */\r\n\r\n\r\n    "],"names":[],"mappings":";;;;;AAAA;;AAGA,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAC/D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IACnC,OAAO;AACX;AAGO,MAAM,oBAAoB,OAAO;IACpC,MAAM,WAAW,MAAM,MAAM,eAAe,CAAC;QACzC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDA4B8C,CAAC;QAChD,CAAC,8CAA8C,EAAE,MAAM;KAC1D;IACD,OAAO,SAAS,QAAQ,CAAC,IAAI;AACjC;AAuBO,eAAe,cAAc,GAAa;IAC7C,QAAQ,GAAG,CAAC,uBAAuB,IAAI,QAAQ,CAAC,MAAM;IACtD,IAAG;QACC,MAAM,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,0BAA0B;QACxE,MAAM,WAAW,MAAM,MAAM,eAAe,CAAC;YACzC,CAAC,qHAAqH,CAAC;YACvH,CAAC,wFAAwF,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC;;;AAG3H,EAAE,KAAK;;mEAE4D,CAAC;SAC3D;QAED,OAAO,SAAS,QAAQ,CAAC,IAAI;IAEjC,EAAE,OAAO,OAAO;QACZ,OAAO;IACX;AAEJ;AAGO,eAAe,kBAAkB,OAAe;IACnD,MAAM,QAAQ,MAAM,kBAAkB,CAAC;QACnC,OAAO;IACX;IACA,MAAM,SAAS,MAAM,MAAM,YAAY,CAAC;IACxC,MAAM,YAAY,OAAO,SAAS;IAClC,OAAO,UAAU,MAAM;AAC3B,EACA,uDAAuD;CAEnD;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BA","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/lib/github.ts"],"sourcesContent":["import { db } from '@/server/db';\r\nimport { Octokit } from 'octokit';\r\nimport axios from 'axios';\r\nimport { aiSummariseCommit } from './gemini';\r\n\r\nexport const octokit = new Octokit({\r\n    auth: process.env.GITHUB_TOKEN,\r\n});\r\n\r\nconst githubUrl = 'https://github.com/docker/genai-stack';\r\n\r\ntype Response = {\r\n    commitHash: string;\r\n    commitMessage: string;\r\n    commitAuthorName: string;\r\n    commitAuthorAvatar: string;\r\n    commitDate: string;\r\n}\r\n\r\nexport const getCommitHashes =async (githubUrl: string): Promise<Response[]> => {\r\n    // https://github.com/docker/genai-stack\r\n    const [owner, repo] = githubUrl.split('/').slice(-2)\r\n    if(!owner || !repo) {\r\n        throw new Error('Invalid GitHub URL');\r\n    }\r\n    const { data } = await octokit.rest.repos.listCommits({\r\n        owner,\r\n        repo\r\n        \r\n    });\r\n    const sortedCommits = data.sort((a: any, b: any) => new Date(b.commit.author.date).getTime() - new Date(a.commit.author.date).getTime()) as any[];\r\n\r\n    return sortedCommits.slice(0, 10).map((commit: any) => ({\r\n        commitHash: commit.sha as string,\r\n        commitMessage: commit.commit.message ?? \"\",\r\n        commitAuthorName: commit.commit?.author?.name ?? \"\",\r\n        commitAuthorAvatar: commit.author?.avatar_url ?? \"\",\r\n        commitDate: commit.commit?.author?.date ?? \"\",\r\n    }))\r\n}\r\n\r\n// console.log(await getCommitHashes(githubUrl))\r\n\r\nexport const pollCommits = async (projectId: string) => {\r\n    const {project, githubUrl} = await fetchProjectGithubUrl(projectId)\r\n    const commitHashes = await getCommitHashes(githubUrl)\r\n    const unprocessedCommits = await filterUnprocessedCommits(projectId, commitHashes);\r\n    const summaryResponses = await Promise.allSettled(unprocessedCommits.map(commit => {\r\n        return summariseCommit(githubUrl,commit.commitHash)\r\n    })) \r\n\r\n    //console.log(unprocessedCommits);\r\n\r\n    const summaries = summaryResponses.map((response) => { \r\n        if (response.status === 'fulfilled') {\r\n            return response.value as string\r\n        }\r\n        return \"\"\r\n    })\r\n\r\n    const commits = await db.commit.createMany({\r\n        data: summaries.map((summary, index) => {\r\n            console.log(`processing commit ${index}`);\r\n            return {\r\n                projectId: projectId,\r\n                commitHash: unprocessedCommits[index]!.commitHash,\r\n                commitMessage: unprocessedCommits[index]!.commitMessage,\r\n                commitAuthorName: unprocessedCommits[index]!.commitAuthorName,\r\n                commitAuthorAvatar: unprocessedCommits[index]!.commitAuthorAvatar,\r\n                commitDate: unprocessedCommits[index]!.commitDate,\r\n                summary\r\n            }\r\n        })\r\n    })\r\n\r\n    return commits\r\n    \r\n}\r\n\r\n// FUNCTION TO GENERATE SUMMARY\r\n/*\r\nasync function summariseCommit(githubUrl: string, commitHash: string){\r\n    // get the diff, then pass the diff into ai\r\n    const { data } = await axios.get(`${githubUrl}/commit/${commitHash},diff`, {\r\n        headers: {\r\n            Accept: 'application/vnd.github.v3.diff',\r\n        }\r\n    })\r\n    return await aiSummariseCommit(data) || \"\"\r\n}\r\n*/\r\n\r\nasync function summariseCommit(githubUrl: string, commitHash: string) {\r\n  const [owner, repo] = githubUrl.split('/').slice(-2);\r\n\r\n  const { data } = await axios.get(\r\n    `https://api.github.com/repos/${owner}/${repo}/commits/${commitHash}`,\r\n    {\r\n      headers: {\r\n        Accept: 'application/vnd.github.v3.diff',\r\n        Authorization: `Bearer ${process.env.GITHUB_TOKEN}`\r\n      },\r\n      responseType: 'text' // <- this is critical\r\n    }\r\n  );\r\n\r\n  const summaryText = await aiSummariseCommit(data);\r\n  console.log(\"Generated Summary:\", summaryText);\r\n\r\n  return summaryText || \"\";\r\n}\r\n\r\n\r\n\r\n\r\nasync function fetchProjectGithubUrl(projectId: string) {\r\n    const project = await db.project.findUnique({\r\n        where: {id: projectId},\r\n        select: {\r\n            githubUrl: true\r\n        }\r\n    })\r\n    if(!project?.githubUrl) {\r\n        throw new Error('Project does not have a GitHub URL');\r\n    }\r\n    return { project, githubUrl: project?.githubUrl };    \r\n}\r\n\r\nasync function filterUnprocessedCommits(projectId: string, commitHashes: Response[]) {\r\n    const processedCommits = await db.commit.findMany({\r\n        where: { projectId }\r\n    })    \r\n        \r\n    const unprocessedCommits = commitHashes.filter((commit) => !processedCommits.some((processedCommit) => processedCommit.commitHash === commit.commitHash));\r\n\r\n    return unprocessedCommits\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,UAAU,IAAI,oKAAA,CAAA,UAAO,CAAC;IAC/B,MAAM,QAAQ,GAAG,CAAC,YAAY;AAClC;AAEA,MAAM,YAAY;AAUX,MAAM,kBAAiB,OAAO;IACjC,wCAAwC;IACxC,MAAM,CAAC,OAAO,KAAK,GAAG,UAAU,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;IAClD,IAAG,CAAC,SAAS,CAAC,MAAM;QAChB,MAAM,IAAI,MAAM;IACpB;IACA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QAClD;QACA;IAEJ;IACA,MAAM,gBAAgB,KAAK,IAAI,CAAC,CAAC,GAAQ,IAAW,IAAI,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO;IAErI,OAAO,cAAc,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,SAAgB,CAAC;YACpD,YAAY,OAAO,GAAG;YACtB,eAAe,OAAO,MAAM,CAAC,OAAO,IAAI;YACxC,kBAAkB,OAAO,MAAM,EAAE,QAAQ,QAAQ;YACjD,oBAAoB,OAAO,MAAM,EAAE,cAAc;YACjD,YAAY,OAAO,MAAM,EAAE,QAAQ,QAAQ;QAC/C,CAAC;AACL;AAIO,MAAM,cAAc,OAAO;IAC9B,MAAM,EAAC,OAAO,EAAE,SAAS,EAAC,GAAG,MAAM,sBAAsB;IACzD,MAAM,eAAe,MAAM,gBAAgB;IAC3C,MAAM,qBAAqB,MAAM,yBAAyB,WAAW;IACrE,MAAM,mBAAmB,MAAM,QAAQ,UAAU,CAAC,mBAAmB,GAAG,CAAC,CAAA;QACrE,OAAO,gBAAgB,WAAU,OAAO,UAAU;IACtD;IAEA,kCAAkC;IAElC,MAAM,YAAY,iBAAiB,GAAG,CAAC,CAAC;QACpC,IAAI,SAAS,MAAM,KAAK,aAAa;YACjC,OAAO,SAAS,KAAK;QACzB;QACA,OAAO;IACX;IAEA,MAAM,UAAU,MAAM,qHAAA,CAAA,KAAE,CAAC,MAAM,CAAC,UAAU,CAAC;QACvC,MAAM,UAAU,GAAG,CAAC,CAAC,SAAS;YAC1B,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,OAAO;YACxC,OAAO;gBACH,WAAW;gBACX,YAAY,kBAAkB,CAAC,MAAM,CAAE,UAAU;gBACjD,eAAe,kBAAkB,CAAC,MAAM,CAAE,aAAa;gBACvD,kBAAkB,kBAAkB,CAAC,MAAM,CAAE,gBAAgB;gBAC7D,oBAAoB,kBAAkB,CAAC,MAAM,CAAE,kBAAkB;gBACjE,YAAY,kBAAkB,CAAC,MAAM,CAAE,UAAU;gBACjD;YACJ;QACJ;IACJ;IAEA,OAAO;AAEX;AAEA,+BAA+B;AAC/B;;;;;;;;;;AAUA,GAEA,eAAe,gBAAgB,SAAiB,EAAE,UAAkB;IAClE,MAAM,CAAC,OAAO,KAAK,GAAG,UAAU,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;IAElD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAC9B,CAAC,6BAA6B,EAAE,MAAM,CAAC,EAAE,KAAK,SAAS,EAAE,YAAY,EACrE;QACE,SAAS;YACP,QAAQ;YACR,eAAe,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAE;QACrD;QACA,cAAc,OAAO,sBAAsB;IAC7C;IAGF,MAAM,cAAc,MAAM,CAAA,GAAA,sHAAA,CAAA,oBAAiB,AAAD,EAAE;IAC5C,QAAQ,GAAG,CAAC,sBAAsB;IAElC,OAAO,eAAe;AACxB;AAKA,eAAe,sBAAsB,SAAiB;IAClD,MAAM,UAAU,MAAM,qHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,UAAU,CAAC;QACxC,OAAO;YAAC,IAAI;QAAS;QACrB,QAAQ;YACJ,WAAW;QACf;IACJ;IACA,IAAG,CAAC,SAAS,WAAW;QACpB,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;QAAE;QAAS,WAAW,SAAS;IAAU;AACpD;AAEA,eAAe,yBAAyB,SAAiB,EAAE,YAAwB;IAC/E,MAAM,mBAAmB,MAAM,qHAAA,CAAA,KAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC9C,OAAO;YAAE;QAAU;IACvB;IAEA,MAAM,qBAAqB,aAAa,MAAM,CAAC,CAAC,SAAW,CAAC,iBAAiB,IAAI,CAAC,CAAC,kBAAoB,gBAAgB,UAAU,KAAK,OAAO,UAAU;IAEvJ,OAAO;AACX","debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/lib/github-loader.ts"],"sourcesContent":["// THIS FUNCTION TAKES A GITHUB URL AND LISTS THE FILES IN THE REPOSITORY\r\nimport {GithubRepoLoader} from '@langchain/community/document_loaders/web/github'\r\n// Loading and parsing content (code, markdown, docs, etc.) from a GitHub repository into documents that can be used in LLM pipelines, like for RAG (Retrieval-Augmented Generation).\r\n\r\nimport { Document } from '@langchain/core/documents'\r\nimport { summariseCode } from './gemini'\r\nimport { generateEmbedding } from './gemini'\r\n\r\n\r\nexport const loadGithubRepo = async(githubUrl: string, githubToken?: string) => {\r\n    const loader = new GithubRepoLoader(githubUrl, {\r\n        accessToken: githubToken || '',\r\n        branch: 'main',\r\n        ignoreFiles: ['package-lock-json', 'yarn.lock', 'pnpm-lock.yaml', 'bun.lockb'],\r\n        recursive: true, // If you want to load all files in the repository, set this to true\r\n        unknown: 'warn',\r\n        maxConcurrency: 5 // Adjust this based on your needs and the rate limits of the GitHub API\r\n    })  \r\n    const docs = await loader.load()\r\n    return docs\r\n}\r\n\r\n/* RETURN TYPE =>\r\nDocument {\r\n'white',\\n    'text_bg': 'white',\\n    'text_fg': 'black',\\n    'plot_bg': 'white',\\n    'plot_fg': 'black',\\n    'waveform_color': '#4caf50',\\n    'axis_color': 'black',\\n    'grid_color': '#dddddd'\\n}\\ndef get_styles():\\n    return {'dark_theme': dark_theme, 'light_theme': light_theme, 'button_style': button_style}\",\r\n    metadata: {\r\n      source: \"app/utils/config.py\",\r\n      repository: \"https://github.com/CowTheGreat/Real-Time-Audio-Recorder-and-Transcriber-using-Whisper-AI\",     \r\n      branch: \"main\",\r\n    },\r\n    id: undefined,\r\n\r\n */   \r\n\r\n// console.log(await loadGithubRepo('https://github.com/CowTheGreat/Real-Time-Audio-Recorder-and-Transcriber-using-Whisper-AI'))\r\n\r\n\r\n// FUNCTION TO STROE IN DB\r\nexport const indexGithubRepo = async(projectId: string, githubUrl: string, githubToken?: string) => {\r\n    const docs = await loadGithubRepo(githubUrl, githubToken)\r\n    const allEmbeddings = await generateEmbeddings(docs)\r\n    await Promise.allSettled(allEmbeddings.map(async (embedding, index) => {\r\n        console.log(`processing ${index} of ${allEmbeddings.length}`)\r\n        if(!embedding) return\r\n\r\n        const soureCodeEmbedding = await db.soureCodeEmbedding.insert({\r\n            data: {\r\n                summary: embedding.summary,\r\n                SourceCode: embedding.sourceCode,\r\n                fileName: embedding.fileName,\r\n                projectId,\r\n            }\r\n        })\r\n        // TO STORE VETOR PRISMA DOESNT, SO USE SQL\r\n        await db.$executeRaw`\r\n        UPDATE : \"soureCodeEmbedding\"\r\n        SET \"summaryEmbedding\" = ${embedding.embedding}::Vector\r\n        WHERE \"id\" = ${sourceCodeEmbedding.id}\r\n        `\r\n\r\n    }))\r\n}\r\n\r\n// GETS SUMMARY AND GENERATES EMBEDDINGS\r\nconst generateEmbeddings = async (docs: Document[]) => {\r\n    return await Promise.all(docs.map(async doc => {\r\n        const summary = await summariseCode(doc)\r\n        const embedding = await generateEmbedding(summary)\r\n        return {\r\n            summary,\r\n            embedding,\r\n            sourceCode: JSON.parse(JSON.stringify(doc.pageContent)),\r\n            fileName: doc.metadata.source,\r\n        }\r\n    }))\r\n}"],"names":[],"mappings":"AAAA,yEAAyE;;;;;AACzE;AAAA;AAIA;;;;AAIO,MAAM,iBAAiB,OAAM,WAAmB;IACnD,MAAM,SAAS,IAAI,uLAAA,CAAA,mBAAgB,CAAC,WAAW;QAC3C,aAAa,eAAe;QAC5B,QAAQ;QACR,aAAa;YAAC;YAAqB;YAAa;YAAkB;SAAY;QAC9E,WAAW;QACX,SAAS;QACT,gBAAgB,EAAE,wEAAwE;IAC9F;IACA,MAAM,OAAO,MAAM,OAAO,IAAI;IAC9B,OAAO;AACX;AAkBO,MAAM,kBAAkB,OAAM,WAAmB,WAAmB;IACvE,MAAM,OAAO,MAAM,eAAe,WAAW;IAC7C,MAAM,gBAAgB,MAAM,mBAAmB;IAC/C,MAAM,QAAQ,UAAU,CAAC,cAAc,GAAG,CAAC,OAAO,WAAW;QACzD,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,MAAM,IAAI,EAAE,cAAc,MAAM,EAAE;QAC5D,IAAG,CAAC,WAAW;QAEf,MAAM,qBAAqB,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;YAC1D,MAAM;gBACF,SAAS,UAAU,OAAO;gBAC1B,YAAY,UAAU,UAAU;gBAChC,UAAU,UAAU,QAAQ;gBAC5B;YACJ;QACJ;QACA,2CAA2C;QAC3C,MAAM,GAAG,WAAW,CAAC;;iCAEI,EAAE,UAAU,SAAS,CAAC;qBAClC,EAAE,oBAAoB,EAAE,CAAC;QACtC,CAAC;IAEL;AACJ;AAEA,wCAAwC;AACxC,MAAM,qBAAqB,OAAO;IAC9B,OAAO,MAAM,QAAQ,GAAG,CAAC,KAAK,GAAG,CAAC,OAAM;QACpC,MAAM,UAAU,MAAM,CAAA,GAAA,sHAAA,CAAA,gBAAa,AAAD,EAAE;QACpC,MAAM,YAAY,MAAM,CAAA,GAAA,sHAAA,CAAA,oBAAiB,AAAD,EAAE;QAC1C,OAAO;YACH;YACA;YACA,YAAY,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,WAAW;YACrD,UAAU,IAAI,QAAQ,CAAC,MAAM;QACjC;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 694, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/server/api/routers/project.ts"],"sourcesContent":["import {z} from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"../trpc\";\r\nimport { pollCommits } from \"@/lib/github\";\r\nimport { indexGithubRepo } from \"@/lib/github-loader\";\r\n\r\nexport const  projectRouter = createTRPCRouter({\r\n  createProject: protectedProcedure.input(\r\n    z.object({\r\n        name: z.string(),\r\n        githubUrl: z.string(),\r\n        githubToken: z.string().optional()\r\n    })\r\n  ).mutation(async ({ ctx, input }) => {\r\n\r\n    // project is prima model\r\n    const project = await ctx.db.project.create({ \r\n        data: {\r\n            githubUrl: input.githubUrl,\r\n            name: input.name,\r\n            userToProjects: {\r\n                create: {\r\n                    userId: ctx.user.userId!, // ! since I am sure ctx.user.userId is not null or undefined here.\r\n                }\r\n            }\r\n        }\r\n        \r\n    })\r\n    await indexGithubRepo(project.id, input.githubUrl, input.githubToken) // from github-loader.ts\r\n    await pollCommits(project.id) // Poll commits for the project\r\n    return project\r\n    \r\n    //console.log('input', input)\r\n    //return true\r\n  }),\r\n\r\n  // PROTECTEDPROCEDURE SINCE I ONLY LOGIN ANDONLY I WNAT TO KNOW THE PROJECTS\r\n  getProjects: protectedProcedure.query(async ({ ctx }) => {\r\n    return await ctx.db.project.findMany({\r\n        where: {\r\n            userToProjects: {\r\n                some: { // some means Only include projects where at least one UserToProject entry exists with this userId\r\n                    userId: ctx.user.userId!,\r\n                }\r\n            },\r\n            deletedAt: null // If deletedAt has a timestamp (new Date()), it means the item was \"soft deleted\". // This lets you \"hide\" items without removing them from the database.\r\n        }\r\n    })\r\n  }),\r\n  getCommits: protectedProcedure.input(z.object({\r\n    projectId: z.string()\r\n  })).query(async ({ ctx, input }) => {\r\n    pollCommits(input.projectId).then().catch(console.error)\r\n    return await ctx.db.commit.findMany({ where: { projectId: input.projectId} })\r\n    })\r\n})\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAO,gBAAgB,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC7C,eAAe,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CACrC,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACL,MAAM,+KAAA,CAAA,IAAC,CAAC,MAAM;QACd,WAAW,+KAAA,CAAA,IAAC,CAAC,MAAM;QACnB,aAAa,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACpC,IACA,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAE9B,yBAAyB;QACzB,MAAM,UAAU,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC;YACxC,MAAM;gBACF,WAAW,MAAM,SAAS;gBAC1B,MAAM,MAAM,IAAI;gBAChB,gBAAgB;oBACZ,QAAQ;wBACJ,QAAQ,IAAI,IAAI,CAAC,MAAM;oBAC3B;gBACJ;YACJ;QAEJ;QACA,MAAM,CAAA,GAAA,gIAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ,EAAE,EAAE,MAAM,SAAS,EAAE,MAAM,WAAW,GAAE,wBAAwB;QAC9F,MAAM,CAAA,GAAA,sHAAA,CAAA,cAAW,AAAD,EAAE,QAAQ,EAAE,GAAE,+BAA+B;QAC7D,OAAO;IAEP,6BAA6B;IAC7B,aAAa;IACf;IAEA,4EAA4E;IAC5E,aAAa,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAClD,OAAO,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;YACjC,OAAO;gBACH,gBAAgB;oBACZ,MAAM;wBACF,QAAQ,IAAI,IAAI,CAAC,MAAM;oBAC3B;gBACJ;gBACA,WAAW,KAAK,0JAA0J;YAC9K;QACJ;IACF;IACA,YAAY,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC5C,WAAW,+KAAA,CAAA,IAAC,CAAC,MAAM;IACrB,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,CAAA,GAAA,sHAAA,CAAA,cAAW,AAAD,EAAE,MAAM,SAAS,EAAE,IAAI,GAAG,KAAK,CAAC,QAAQ,KAAK;QACvD,OAAO,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;YAAE,OAAO;gBAAE,WAAW,MAAM,SAAS;YAAA;QAAE;IAC3E;AACJ","debugId":null}},
    {"offset": {"line": 757, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/server/api/root.ts"],"sourcesContent":["import { postRouter } from \"@/server/api/routers/post\";\nimport { createCallerFactory, createTRPCRouter } from \"@/server/api/trpc\";\nimport { projectRouter } from \"./routers/project\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  post: postRouter,\n  project: projectRouter // FROM PROJECT.TS\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAOO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,yIAAA,CAAA,aAAU;IAChB,SAAS,6IAAc,kBAAkB;IAAhC,CAAA,gBAAa;AACxB;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 777, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/github-chatbot/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { type NextRequest } from \"next/server\";\n\nimport { env } from \"@/env\";\nimport { appRouter } from \"@/server/api/root\";\nimport { createTRPCContext } from \"@/server/api/trpc\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */\nconst createContext = async (req: NextRequest) => {\n  return createTRPCContext({\n    headers: req.headers,\n  });\n};\n\nconst handler = (req: NextRequest) =>\n  fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext: () => createContext(req),\n    onError:\n      env.NODE_ENV === \"development\"\n        ? ({ path, error }) => {\n            console.error(\n              `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`,\n            );\n          }\n        : undefined,\n  });\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;AACA;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,yKAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;YACd,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;QAE/D,IACA;IACR","debugId":null}}]
}